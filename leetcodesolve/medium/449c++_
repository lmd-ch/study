/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Codec {
public:

    // Encodes a tree to a single string.
    string s;
    void dfs(TreeNode* root){
        if(!root) return ;
        s+=(to_string(root->val)+" ");
        if(root->left) dfs(root->left);
        else s+=(to_string(-1)+" ");
        if(root->right) dfs(root->right);
        else s+=(to_string(-1)+" ");
    }
    string serialize(TreeNode* root) {
        s="";
        dfs(root);
        // cout<<s<<endl;
        return s;
    }

    // Decodes your encoded data to tree.
    vector<int> l;
    TreeNode* deserialize(string data) {
        stringstream ss(data);
        while(ss>>s){
            l.push_back(stoi(s));
        }
        // for(int e:l) cout<<e<<endl;
        int id =0;
        return dfs2(l,id);
    }
    TreeNode* dfs2(vector<int> &l,int& index){
        if(index>=l.size()) return nullptr;
        TreeNode* a = nullptr;
        if(l[index]!=-1){
            a = new TreeNode(l[index]);
            index++;
            a->left = dfs2(l,index);
            index++;
            a->right = dfs2(l,index);
        }
        
        return a;
    }
};

