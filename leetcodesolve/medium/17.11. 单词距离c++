class Solution {
public:
    int findClosest(vector<string>& words, string word1, string word2) {
        vector<int>a,b;
        for(int i = 0; i < words.size(); i++) {
            if(words[i] == word1) a.push_back(i);
            if(words[i] == word2) b.push_back(i);
        }
        int d = INT_MAX;
        for(int j = 0; j < a.size(); j++) {
            for(int k = 0; k < b.size(); k++ ) {
                if(abs(a[j] - b[k]) < d) d = abs(a[j] - b[k]); 
            }
        }
        return d;
    }
};//暴力，复杂度高



//可以用两个变量来表示words遍历的最后一个word1和word2的下标，初始默认为-1，当遇到了word1或word2更新相应的下标
class Solution {
public:
    int findClosest(vector<string>& words, string word1, string word2) {
        int a = -1, b = -1;
        int d = INT_MAX;
        for(int i = 0; i < words.size(); i++) {
            if(words[i] == word1 ) {
                a = i;
                if(abs(a - b) < d && b != -1) {
                    d = abs(a - b);
                }
            }
            if(words[i] == word2) {
                b = i;
                if(abs(a - b) < d && a != -1) {
                    d = abs(a - b);
                }
            }
        }
        return d;
    }
};
