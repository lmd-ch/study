class Solution {
// public:
//     vector<int> findRightInterval(vector<vector<int>>& intervals) {
//         vector<int> res;
//         for(int i = 0; i < intervals.size(); i++) {
//             res.push_back(-1);
//         }
//         for(int i = 0; i < intervals.size(); i++) {
//             int temp = INT_MAX;
//             for(int j = 0;j < intervals.size() ; j++) {
//                 if(intervals[i][1] <= intervals[j][0] && temp >intervals[j][0]-intervals[i][1]) 
//                 {
//                     temp =intervals[j][0]-intervals[i][1];
//                     res [i] = j;
//                 }
//             }
//         }
//         return res;
//     }
// };//直接暴力，超出时间限制了

//还是map方便emm
class Solution {
    using p = pair<int,int>;
public:
    vector<int> findRightInterval(vector<vector<int>>& intervals) {
        map<int,int> m;
        for(int i = 0; i < intervals.size(); ++i){
            m[intervals[i][0]] = i;
        }
        vector<int> ans;
        for(int i = 0; i < intervals.size(); ++i){
            int start = intervals[i][0],end = intervals[i][1];
            auto it = m.lower_bound(end);
            if(it != m.end()) ans.push_back(it->second);
            else ans.push_back(-1);
        }
        return ans;
    }
};

