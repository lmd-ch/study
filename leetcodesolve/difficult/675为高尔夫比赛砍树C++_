int dx[]={0,0,-1,1};
int dy[]={1,-1,0,0};
class Solution {
public:
    int bfs(vector<vector<int>>& mp,pair<int,int> s,pair<int,int> t)
    {
        int n=mp.size(),m=mp[0].size();
        vector<vector<int>> dis(n,vector<int>(m,-1));
        queue<pair<int,int>> q;
        q.push(s);
        dis[s.first][s.second]=0;
        while(!q.empty())
        {
            pair<int,int> now=q.front();q.pop();
            if(now==t)return dis[t.first][t.second];
            for(int i=0;i<4;i++)
            {
                int x=now.first+dx[i];
                int y=now.second+dy[i];
                if(x>=n||x<0||y>=m||y<0||dis[x][y]!=-1||mp[x][y]==0)continue;
                dis[x][y]=dis[now.first][now.second]+1;
                q.push(make_pair(x,y));
            }
        }
        return -1;
    }
    int cutOffTree(vector<vector<int>>& forest) {
        int n=forest.size(),m=forest[0].size();
        vector<pair<int,pair<int,int>>> p;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(forest[i][j]>1)p.push_back(make_pair(forest[i][j],make_pair(i,j)));
            }
        }
        sort(p.begin(),p.end());
        int ans=0;
        pair<int,int> s=make_pair(0,0);
        for(int i=0;i<p.size();i++)
        {
            int tmp=bfs(forest,s,p[i].second);
            if(tmp==-1)return -1;
            s=p[i].second;
            ans+=tmp;
        }
        return ans;
    }
};//遇到困难睡大觉
